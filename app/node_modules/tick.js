'use strict'

var PNuts = require('pnuts')
    , Class = PNuts.Class
;

var TYPE = {
    NANO : 1,
    MICRO : 2,
    MILLI : 3,
};

// setType****関数で表示する時間のタイプを変える
// setTypeNanoではnano secondsを
// setTypeMicroではmicro secondsを
// setTypeMilliではmilli secondsを
// それぞれ表示するようになる。
// start関数にキーとなる文字列を入れて
// そのキーをend関数に指定すればその間の時間を表示する
var Tick = Class({
    initialize : function(){
        this.list = {};
        this.type = TYPE.MICRO;
    },
    setTypeNano : function(){ this.type = TYPE.NANO },
    setTypeMicro : function(){ this.type = TYPE.MICRO },
    setTypeMilli : function(){ this.type = TYPE.MILLI },
    start : function(key){
        this.list[key] = process.hrtime();
    },
    end : function(key){
        var val = this.list[key];
        if(val === undefined || val === null){
            return;
        }
        var wk = process.hrtime(val);
        this._calc(wk, key);
    },
    _calc : function(hrtime, key){
        var ns = (hrtime[0] * 1000 * 1000 * 1000) + hrtime[1];
        var ms = Math.ceil(ns / (1000 * 1000));
        this._disp(ns, key);
    },
    _disp : function(nanosecond, key){
        var str = '%s : ';
        var value = 0;
        switch(this.type){
        case TYPE.NANO:
            str += '%s nano seconds.';
            value = nanosecond;
            break;
        case TYPE.MICRO:
            str += '%s micro seconds.';
            value = Math.ceil(nanosecond / 1000);
            break;
        case TYPE.MILLI:
            str += '%s milli seconds.';
            value = Math.ceil(nanosecond / (1000 * 1000));
            break;
        }
        console.log(str, key, value);
    },
}).toSingleton();

module.exports = Tick;

